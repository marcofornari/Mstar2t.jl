var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Parallel version: to run the code in parallel with Julia's multi-threading, launch a REPL specifying the number N of execution threads you need:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"$ julia -t N\n\njulia> Threads.nthreads() # to check threads available\nN","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Note: By running julia -t auto, Julia will use the number of local CPU threads.","category":"page"},{"location":"usage/#Examples","page":"Usage","title":"Examples","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Check examples folder for examples.","category":"page"},{"location":"docfun/","page":"Documentation","title":"Documentation","text":"CurrentModule = Mstar2t\nDocTestSetup = quote\n    using Mstar2t\n    using .Utils\nend","category":"page"},{"location":"docfun/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"docfun/#Types","page":"Documentation","title":"Types","text":"","category":"section"},{"location":"docfun/","page":"Documentation","title":"Documentation","text":"Mstar2t.Utils.ParabBand\nMstar2t.Utils.BandStructure","category":"page"},{"location":"docfun/#Mstar2t.Utils.ParabBand","page":"Documentation","title":"Mstar2t.Utils.ParabBand","text":"ParabBand(mstar::Vector{Float64},ϵ₀::Union{Float64,Vector{Float64}},type::Int64,deg::Int64)\n\nJulia type to represent a band. Parameters:\n\nmstar: effective mass tensor\nϵ₀: minimum/maximum of the band\ntype: cconduction +1 or valence -1 band\ndeg: degeneracy\n\nExample\n\njulia> mstar = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];\njulia> ϵ₀ = 0.0;\njulia> type = 1;\njulia> deg = 1;\njulia> band = ParabBand(mstar,ϵ₀,type,deg);  # band creation\n\n```\n\n\n\n\n\n","category":"type"},{"location":"docfun/#Mstar2t.Utils.BandStructure","page":"Documentation","title":"Mstar2t.Utils.BandStructure","text":"BandStructure(n::Int64, bands::Vector{ParabBand}, μ::Union{Float64,Vector{Float64}})\n\nJulia type to represent a band full band structure. Parameters:\n\nn: number of bands\nbands: vector of bands\nμ: Fermi level position\n\nExample\n\njulia> m_1 = [1., 2., 3., 0.0, 0.0, 0.0];\njulia> m_2 = [.5, .7, .9, 0.0, 0.0, 0.0];\njulia> band_1 = ParabBand(m_1,0.0,1,1);     # create the conduction band\njulia> band_2 = ParabBand(m_2,-0.1,-1,1); \njulia> μ = collect(-.1:.01:.1);     \njulia> model = BandStructure(2,[band_1,band_2],μ);    # band creation\n\n\n\n\n\n","category":"type"},{"location":"docfun/#Functions","page":"Documentation","title":"Functions","text":"","category":"section"},{"location":"docfun/","page":"Documentation","title":"Documentation","text":"Mstar2t.Transport.electrical_conductivity\nMstar2t.Transport.seebeck_coefficient\nMstar2t.Transport.carrier_concentration\nMstar2t.Transport.thermal_conductivity\nMstar2t.Transport.lorenz_tensor\nMstar2t.Transport.Ln\n\nMstar2t.Scattering.constant\nMstar2t.Scattering.T_fun\nMstar2t.Scattering.ET_fun\nMstar2t.Scattering.impurity\nMstar2t.Scattering.acoustic\nMstar2t.Scattering.matthiessen\n\nMstar2t.Plot.plot\nMstar2t.Plot.plot_bandstructure\nMstar2t.Plot.plot_τ\nMstar2t.Plot.savefig\n\nMstar2t.Utils.savedata","category":"page"},{"location":"docfun/#Mstar2t.Transport.electrical_conductivity","page":"Documentation","title":"Mstar2t.Transport.electrical_conductivity","text":"electrical_conductivity(bandstructure::BandStructure, Ts::Union{Vector{Float64},Float64,Vector{Int64},Int64}, τ::Union{ScModel,Matthiessen}; exportasdf::Bool=false, fulltensor::Bool=false)\n\nFunction that by default computes the trace of the tensorial version of the electical conductivity in units of (Omega m)^-1 for a given bandstructure and a choice of the relaxation time $\\tau$, for given values of chemical potential $\\mu$ and temperature Ts. The transport coefficient is returned as a matrix of dimensions (length(T),length(μ)). The boolean variable exportasdf allows to return the calculations as a DataFrame with all the parameters included. If fulltensor is set to true the full tensor is returned in place of the trace. Reference: \"Theory of band warping and its effects on thermoelectronic transport properties\", PHYSICAL REVIEW B89.\n\nExample\n\njulia> m = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];  # effectuve mass\njulia> band = ParabBand(m,0.0,1,1); # build the band\njulia> μ = collect(-.1:.01:.1); # fermi level position\njulia> model = BandStructure(1,band_1,μ)    # build the band structure\njulia> T = collect(50:10:650);  # temperature range\njulia> τ_form = Scattering.constant()   # relaxation time\n\njulia> σ = electrical_conductivity(model,T,τ_form); # compute the electrical conductivity\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Transport.seebeck_coefficient","page":"Documentation","title":"Mstar2t.Transport.seebeck_coefficient","text":"seebeck_coefficient(bandstructure::BandStructure, Ts::Union{Vector{Float64},Float64,Vector{Int64},Int64},τ::Union{ScModel,Matthiessen}; exportasdf::Bool=false, fulltensor::Bool=false)\n\nFunction that by default computes the Seebeck coefficient in units of VK for a given bandstructure and a choice of the relaxation time $\\tau$, for given values of chemical potential $\\mu$ and temperature Ts. The transport coefficient is returned as a matrix of dimensions (length(T),length(μ)). The boolean variable exportasdf allows to return the calculations as a DataFrame with all the parameters included. If fulltensor is set to true, the full tensor is returned in place of the trace. Reference: \"Theory of band warping and its effects on thermoelectronic transport properties\", PHYSICAL REVIEW B89.\n\nExample\n\njulia> m = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];  # effectuve mass\njulia> band = ParabBand(m,0.0,1,1); # build the band\njulia> μ = collect(-.1:.01:.1); # fermi level position\njulia> model = BandStructure(1,band_1,μ)    # build the band structure\njulia> T = collect(50:10:650);  # temperature range\njulia> τ_form = Scattering.constant()   # relaxation time\n\njulia> S = seebeck_coefficient(model,T,τ_form); # compute the Seebeck coefficient\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Transport.carrier_concentration","page":"Documentation","title":"Mstar2t.Transport.carrier_concentration","text":"carrier_concentration(bandstructure::BandStructure, Ts::Union{Vector{Float64},Float64,Vector{Int64},Int64}, τ::Union{ScModel,Matthiessen}; exportasdf::Bool=false)\n\nFunction that computes the carrier concentration for a given bandstructure and a choice of the relaxation time $\\tau$, for given values of chemical potential $\\mu$ and temperature Ts. The transport coefficient is returned as a matrix of dimensions (length(T),length(μ)). The boolean variable exportasdf allows to return the calculations as a DataFrame with all the parameters included.\n\nExample\n\njulia> m = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];  # effectuve mass\njulia> band = ParabBand(m,0.0,1,1); # build the band\njulia> μ = collect(-.1:.01:.1); # fermi level position\njulia> model = BandStructure(1,band_1,μ)    # build the band structure\njulia> T = collect(50:10:650);  # temperature range\njulia> τ_form = Scattering.constant()   # relaxation time\n\njulia> n = carrier_concentration(model,T,τ_form); # compute the carrier concentration\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Transport.thermal_conductivity","page":"Documentation","title":"Mstar2t.Transport.thermal_conductivity","text":"thermal_conductivity(bandstructure::BandStructure, Ts::Union{Vector{Float64},Float64,Vector{Int64},Int64},τ::Union{ScModel,Matthiessen}; exportasdf::Bool=false, fulltensor::Bool=false)\n\nFunction that computes the thermal conductivity in units of WK for a given bandstructure and a choice of the relaxation time $\\tau$, for given values of chemical potential $\\mu$ and temperature Ts. The transport coefficient is returned as a matrix of dimensions (length(T),length(μ)). The boolean variable exportasdf allows to return the calculations as a DataFrame with all the parameters included. If fulltensor is set to true, the full tensor is returned in place of the trace..  Reference: \"Theory of band warping and its effects on thermoelectronic transport properties\", PHYSICAL REVIEW B89.\n\nExample\n\njulia> m = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];  # effectuve mass\njulia> band = ParabBand(m,0.0,1,1); # build the band\njulia> μ = collect(-.1:.01:.1); # fermi level position\njulia> model = BandStructure(1,band_1,μ)    # build the band structure\njulia> T = collect(50:10:650);  # temperature range\njulia> τ_form = Scattering.constant()   # relaxation time\n\njulia> Κ = thermal_conductivity(model,T,τ_form); # compute the thermal conductivity\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Transport.lorenz_tensor","page":"Documentation","title":"Mstar2t.Transport.lorenz_tensor","text":"lorenz_tensor(bandstructure::BandStructure, Ts::Union{Vector{Float64},Float64,Vector{Int64},Int64},τ::Union{ScModel,Matthiessen}; exportasdf::Bool=false, fulltensor::Bool=false)\n\nFunction that computes the Lorentz tensor for a given bandstructure and a choice of the relaxation time $\\tau$, for given values of chemical potential $\\mu$ and temperature Ts. The transport coefficient is returned as a matrix of dimensions (length(T),length(μ)). The boolean variable exportasdf allows to return the calculations as a DataFrame with all the parameters included. If fulltensor is set to true, the full tensor is returned in place of the trace.  The Lorentz tensor is defined as the ratio between thermal and electrical conductivity multiplied by temperature. Ref.: https://en.wikipedia.org/wiki/Wiedemann-Franz_law\n\nExample\n\njulia> m = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];  # effectuve mass\njulia> band = ParabBand(m,0.0,1,1); # build the band\njulia> μ = collect(-.1:.01:.1); # fermi level position\njulia> model = BandStructure(1,band_1,μ)    # build the band structure\njulia> T = collect(50:10:650);  # temperature range\njulia> τ_form = Scattering.constant()   # relaxation time\n\njulia> L = lorenz_tensor(model,T,τ_form); # compute the lorenz tensor\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Transport.Ln","page":"Documentation","title":"Mstar2t.Transport.Ln","text":"Ln(ϵ₀::Float64, μ::Float64, bandtype::Int64, T::Float64, β::Float64, n::Int64, idx::Int64, scm::ScModel)\n\nThis function is called when an integration is required. n=012 is the index of the kinetic coefficient. Reference: \"Theory of band warping and its effects on thermoelectronic transport properties\", PHYSICAL REVIEW B89. \n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Scattering.constant","page":"Documentation","title":"Mstar2t.Scattering.constant","text":"constant(A::T=1.0) where {T<:Real}\n\nModel for the relaxation time is set to the constant relaxation time approximation (CRTA), $τ = A*1e-14$. Tje default value for A is 1.0.\n\nParameter:\n\nA: value for the A constant above.\n\nExample\n\njulia> τ_form = Scattering.constant()   # relaxation time\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Scattering.T_fun","page":"Documentation","title":"Mstar2t.Scattering.T_fun","text":"T_fun(τ::Function)\n\nSet the temperature dependence of the relaxation time from a function given by the user.  \n\nExample\n\njulia> f(T) = sqrt(T)  # τ ∝ √T\njulia> τ_form = T_fun(f)   # relaxation time\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Scattering.ET_fun","page":"Documentation","title":"Mstar2t.Scattering.ET_fun","text":"ET_fun(τ::Function)\n\nSet the energy and temperature dependence of the relaxation time from a function given by the user.  \n\nExample\n\njulia> f(ϵ,T) = sqrt(ϵ)/T  # τ ∝ √ϵ/T\njulia> τ_form = ET_fun(f)  # relaxation time\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Scattering.impurity","page":"Documentation","title":"Mstar2t.Scattering.impurity","text":"impurity(ϵ_im::Real, A_im::Real=1;γ::Real=1.)\n\nInclude impurity scattering in the simulations.\n\nParameters:\n\nϵ_im: energy of the impurity in eV\nA: multiplicative constant in front of the functional expression\nγ: γ-parameter three-parameter Lorentzian function (Ref: https://en.wikipedia.org/wiki/Cauchy_distribution)\n\nExample\n\njulia> ϵ_im = 0.2  # eV\njulia> τ_form = impurity(ϵ_im, A=1e-1)  # relaxation time\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Scattering.acoustic","page":"Documentation","title":"Mstar2t.Scattering.acoustic","text":"acoustic(bands_min::Union{BandStructure,Real}, A_sm::Real=1., τm_max::Real=1.; T₀::Real=50., μ_min::Real=2, μ_max::Real=2, s=2)\n\nInclude acoustic scattering in the simulations. Implementation of the functional expression in Wilson, Alan Herries. 1953, The theory of metals / by A. H. Wilson  Cambridge Uni. Press Cambridge, England.\n\nParameters:\n\nbands_min`: energy of the lowest band. If a BandStructure type is passed, the value is automatically derived. \nA_sm: multiplicative constant in front of the functional expression for the acoustic τ in semiconductors in units of 5e-20 s.\nτm_max: free parameter to constraint the functional form for the acoustic τ in metals. τ(bandmin+μ_maxT) = τm_max in units of 2e-12 s$ \nT₀: minimum of temperature range in which the τ is defined (note: τ ∝ 1/(T-T₀), where T is the temperature input defined by the user.\nμ_min: left shift in energy from the energy of the lowest band (ϵ_min). It defines the first point at which τ is computed (i.e., τ propto 1sqrt(μ-(ϵ_min-μ_min)).\nμ_max: right shift in energy from the energy of the band ϵ₀. It defines the last point at which τ is computed (i.e., τ(ϵ₀+μ_maxT) = τm_max).\n\nExample\n\njulia> band_1 = ParabBand([5.0, 5.0, 5.0, 0.0, 0.0, 0.0],1.0, 1,1);    # conduction band\njulia> band_2 = ParabBand([0.1, 0.5, 3.0, 0.0, 0.0, 0.0],0.5,-1,1);    # valence band\njulia> model = BandStructure(2,[band_1,band_2],0.8);   # build the two-band structure\njulia> τ_form = Scattering.acoustic(model,T₀=180,μ_min=5,μ_max=5);  # relaxation time\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Scattering.matthiessen","page":"Documentation","title":"Mstar2t.Scattering.matthiessen","text":"matthiessen(τ_models::Array{ScModel};γ::Float64=-1.)\n\nThis function applies Matthiessen's rule to sum up different scattering mechanisms. \n\nParameters:\n\nτ_models: vector of relaxation time models\nγ: exponent in the generalized Matthiessen's rule:\n\ntau = (sum_i τ_i^γ)^(1γ) \n\nwhere each $\\tau_i$ can be a function of $T$ and/or $\\mu$. \n\nExample\n\njulia> ϵ_im = 0.2  # eV\njulia> τ1 = constant()  # CRTA\njulia> τ2 = impurity(ϵ_im,A=1e-1)   # impurity scattering\njulia> τ_model =  matthiessen([τ1,τ2]);  # matthiessen's rule\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Plot.plot","page":"Documentation","title":"Mstar2t.Plot.plot","text":"plot(num_plots, x_axis, data, z; vlines=Float64[], annotations=[], color=ColorTypes.RGBA{Float64}(Colors.JULIA_LOGO_COLORS.blue), colorscheme=:viridis, titles=L\"\", xlabels=L\"\", ylabels=L\"\", zlabel=L\"\")\n\nPlot the transport coefficients. y must be a vector if plotting a single line, or a matrix of shape (length(x_axis),length(z_axis)) if plotting more than one line. \n\nParameters:\n\nnum_plots (Int64): number of transport coefficients to plot in the same figure\nx (Union{Vector{Float64},Float64,Vector{Int64},Int64}): x axis vector\ny (Union{Vector{Float64},Matrix{Float64},Vector{Vector{Float64}},Vector{Matrix{Float64}}}): y axis vector/matrix\nz (Union{Vector{Float64},Vector{Int64}}): z axis vector\ntitles (Union{LaTeXString,Vector{LaTeXString}}): titles for each plot\nxlabels (Union{LaTeXString,Vector{LaTeXString}}): x labels for each plot\nylabels (Union{LaTeXString,Vector{LaTeXString}}): x labels for each plot\nzlabel (LaTeXString): z labels for the shared colorbar\ncolor (ColorTypes.RGBA{Float64}): line color\ncolorscheme: colormap\nvlines (Union{Float64,Array{Float64}}): add vertical lines to the plot\nannotations (Vector{Any}): add text annotation to the plot\n\nExample\n\nSingle line (z is empty). Plot of electrical conductivity, Seebeck and carrier concentration as functions of the band gap.\n\njulia> titles  = [L\"$σ$ vs gap, $μ$ = %$μ, $τ = const$\", L\"$S$ vs gap, $μ$ = %$μ, $τ = const$\", L\"$n$ vs gap, $μ$ = %$μ, $τ = const$\"]\njulia> xlabels = [L\"$Gap$ $[eV]$\" for i in 1:3];\njulia> ylabels = [L\"$\\sigma$ $[(\\Omega m)^{-1}]$\", L\"$S$ $[\\mu VK^{-1}]$\", L\"n\"];\njulia> annotations = Dict(L\"v1\" => [(0.11,6e5),(0.11,0),(0.11,5e6)], L\"v2\" => [(0.01,6e5-5e3),(0.01,0),(0.01,5e6-5e4)]);\njulia> fig = plot(3, gap, [σ,S,n], titles=titles, xlabels=xlabels, ylabels=ylabels, vlines=[0.0,0.1], annotations=annotations);\n\nMulti-lines. Plot of electrical conductivity, Seebeck and carrier concentration as functions of the bandgapandtemperature` (z axis). \n\njulia> titles  = [L\"$σ$ vs gap, $μ$ = %$μ, $τ = const$\", L\"$S$ vs gap, $μ$ = %$μ, $τ = const$\", L\"$n$ vs gap, $μ$ = %$μ, $τ = const$\"]\njulia> xlabels = [L\"$Gap$ $[eV]$\" for i in 1:3];\njulia> ylabels = [L\"$\\sigma$ $[(\\Omega m)^{-1}]$\", L\"$S$ $[\\mu VK^{-1}]$\", L\"n\"];\njulia> zlabel  = L\"$T$ $[K]$\";\njulia> annotations = Dict(L\"v1\" => [(0.11,6e5),(0.11,0),(0.11,5e6)], L\"v2\" => [(0.01,6e5-5e3),(0.01,0),(0.01,5e6-5e4)]);\njulia> fig = plot(3, gap, [σ,S,n], T, titles=titles, xlabels=xlabels, ylabels=ylabels, zlabel=zlabel, vlines=[0.0,0.1], annotations=annotations);\n\n`\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Plot.plot_bandstructure","page":"Documentation","title":"Mstar2t.Plot.plot_bandstructure","text":"plot_bandstructure(bs::BandStructure,xaxis::AbstractArray=range(-1, 1, length=100); colors=nothing, label=\"\")\n\nPlot a given parabolic band structure. \n\nParameters:\n\nbs: band structure\nxaxis: x axis vector\ncolors: tuple of three color from Colors. First: conduction bands. Second: valence band. Third: Fermi level.\n\nExamples:\n\njulia> band_1 = ParabBand([5.0, 5.0, 5.0, 0.0, 0.0, 0.0],1.0, 1,1);    # conduction band\njulia> band_2 = ParabBand([0.1, 0.5, 3.0, 0.0, 0.0, 0.0],0.5,-1,1);    # valence band\njulia> μ = 0.8;   # Fermi level\njulia> model = BandStructure(2,[band_1,band_2],μ);   # build the two-band structure\njulia> fig,ax = plot_bandstructure(model,colors=(:green,:red,:blue))\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Plot.plot_τ","page":"Documentation","title":"Mstar2t.Plot.plot_τ","text":"plot_τ(scm::Union{ScModel,Matthiessen}, t::Union{Vector{Float64},Vector{Int64}}, type=\"e-T\",E_argmax::Int64=50; μ=nothing, ϵ₀::Float64=-42., bandtype::Int64=0)\n\n3D plot of a given relaxation time as a function of temperature, energy and Fermi level. \n\nParameters:\n\nscm: relaxation time model\nt: temperature\ntype: type of plot specificed in \"xaxis-zaxis\" format. Available types are \"e-T\",\"T-e\",\"μ-T\",\"T\".\nμ: Fermi level vector. It's mandatory for type=\"μ-T\".\nϵ₀: band energy. It's mandatory for acoustic relaxation time.\nbandtype: band type (conduction, valence). It's mandatory for acoustic relaxation time.\n\nExamples:\n\nConstant relaxation time\n\njulia> T = collect(300:10:650);  # temperature\njulia> τ_form = Scattering.constant()\njulia> fig = plot_τ(τ_form, T, \"T\");\n\nAcoustic\n\njulia> ϵ₀ = .1;  # band energy\njulia> type = 1;  # band type (conduction)\njulia> T = collect(300:10:650);  # temperature\njulia> μ = collect(0.0:0.1:1.0);  # Fermi level\njulia> τ_form = Scattering.acoustic(model,T₀=180,μ_min=5,μ_max=5);\njulia> fig = plot_τ(τ_form, T, \"μ-T\", μ=μ, ϵ₀=ϵ₀, bandtype=type);\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Plot.savefig","page":"Documentation","title":"Mstar2t.Plot.savefig","text":"savefig(fullpath::String, fig::Figure)\n\nExport to disk a given figure to fullpath.\n\nExample\n\nSave the plot for the relaxation time as a function of temperature and Fermi level.\n\njulia> τ_form = Scattering.acoustic(model,T₀=180,μ_min=5,μ_max=5);\njulia> fig = plot_τ(τ_form, T, \"μ-T\", μ=μ, ϵ₀=ϵ₀, bandtype=type);\njulia> savefig(\"acoustic_tau.png\", fig);\n\nSave the plot for the electrical conductivity, Seebeck coefficient and carrier density as a function of temperature and Fermi level.\n\njulia> fig = plot(3, T, [σ,S*1e6,n], μ, titles=titles, xlabels=xlabels, ylabels=ylabels, zlabel=zlabel);\njulia> savefig(\"transport_coefficients.png\", fig);\n\n\n\n\n\n","category":"function"},{"location":"docfun/#Mstar2t.Utils.savedata","page":"Documentation","title":"Mstar2t.Utils.savedata","text":"savedata(path::String, data::DataFrame)\n\nExport to disk a given tranport coefficients simulation to a csv file.\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Check Usage for examples on how to use the CLI and GUI version of m*2T.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The examples folder collects examples of the usage of m*2T as a Julia library.","category":"page"},{"location":"examples/#Constant-relaxation-time-approximation-CRTA","page":"Examples","title":"Constant relaxation time approximation CRTA","text":"","category":"section"},{"location":"examples/#Single-band-model","page":"Examples","title":"Single-band model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n# BAND STRUCTURE DEFINITION\nm = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];\nϵ₀ = 0.0;\ntype = 1;   # conduction band\ndeg = 1;\nband_1 = ParabBand(m,ϵ₀,type,deg);  # create the band\nμ = collect(-.1:.01:.1);            # fermi level position\nmodel = BandStructure(1,band_1,μ)   # build the band structure\n\nT = collect(50:10:650);             # temperature\nτ_form = Scattering.constant()      # relaxation time\n\n# TENSORS COMPUTATION\nσ = electrical_conductivity(model,T,τ_form);    # electrical conductivity\nS = seebeck_coefficient(model,T,τ_form);        # seebeck coefficient\nn = carrier_concentration(model,T,τ_form);      # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"More examples","category":"page"},{"location":"examples/#Bipolar-transport","page":"Examples","title":"Bipolar transport","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n# BAND STRUCTURE DEFINITION\nm_1 = [0.1, 0.1, 0.1, 0.0, 0.0, 0.0];\nϵ₀_1 = 1.0;\ntype_1 = 1;  # conduction band\ndeg_1 = 1;\nband_1 = ParabBand(m_1,ϵ₀_1,type_1,deg_1);  # create the conduction band\n\nm_2 = [1.0, 0.5, 0.5, 0.0, 0.0, 0.0];\nϵ₀_2 = collect(0.0:0.005:1.05);\ntype_2 = -1;    # valence band\ndeg_2 = 1;\nband_2 = ParabBand(m_2,ϵ₀_2,type_2,deg_2);  # create the valence band\n\nμ = 0.8;\nmodel = BandStructure(2,[band_1,band_2],μ); # build the two-band structure\n\nT = collect(50:50:700);         # temperature\nτ_form = Scattering.constant(); # relaxation time\n\n# TENSORS COMPUTATION\nσ = electrical_conductivity(model,T,τ_form);    # electrical conductivity\nS = seebeck_coefficient(model,T,τ_form);        # seebeck coefficient\nn = carrier_concentration(model,T,τ_form);      # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"More examples","category":"page"},{"location":"examples/#Band-convergence","page":"Examples","title":"Band convergence","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n# BAND STRUCTURE DEFINITION\nm_1 = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];\nϵ₀_1 = 0.5;\ntype_1 = 1;\ndeg_1 = 1;\nband_1 = ParabBand(m_1,ϵ₀_1,type_1,deg_1);   # create the conduction band\n\nm_2 = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];\nϵ₀_2 = 0.0;\ntype_2 = -1;\ndeg_2 = 1;\nband_2 = ParabBand(m_2,ϵ₀_2,type_2,deg_2);   # create the \"fixed\" valence band\n\nm_3 = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];\nϵ₀_3 = collect(-0.5:0.001:0.5);\ntype_3 = -1;\ndeg_3 = 1;\nband_3 = ParabBand(m_3,ϵ₀_3,type_3,deg_3);   # create the \"moving\" valence band\n\nμ = -0.1;\nmodel = BandStructure(3,[band_1,band_2,band_3],μ);   # build the three-band structure\n\nT = collect(50:50:700);         # temperature\nτ_form = Scattering.constant(); # relaxation time\n\n# TENSORS COMPUTATION\nσ = electrical_conductivity(model,T,τ_form);    # electrical conductivity\nS = seebeck_coefficient(model,T,τ_form);        # seebeck coefficient\nn = carrier_concentration(model,T,τ_form);      # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"More examples","category":"page"},{"location":"examples/#Wiedemann-Franz-law","page":"Examples","title":"Wiedemann-Franz law","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n# BAND STRUCTURE DEFINITION\nm = [0.1, 1.0, 10.0, 0.0, 0.0, 0.0];\nϵ₀ = 0.0;\ntype = 1;\ndeg = 1;\nband_1 = ParabBand(m,ϵ₀,type,deg);   # create the band\n\nμ = collect(-0.2:0.0005:0.2);\nmodel = BandStructure(1,band_1,μ);   # build the band structure\n\nT = collect(50.:50:700);\nτ_form = Scattering.constant();     # relaxation time\n\n# TENSORS COMPUTATION\nσ = electrical_conductivity(model,T,τ_form);    # electrical conductivity\nK = thermal_conductivity(model,T,τ_form);       # thermal conductivity\nL = lorenz_tensor(model,T,τ_form);              # Lorentz tensor\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"More examples","category":"page"},{"location":"examples/#Non-constant-relaxation-time-approximation-NCRTA","page":"Examples","title":"Non-constant relaxation time approximation NCRTA","text":"","category":"section"},{"location":"examples/#Single-band-model-2","page":"Examples","title":"Single-band model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n\n# BAND STRUCTURE DEFINITION\nm = [0.5, 0.5, 0.5, 0.0, 0.0, 0.0];\nϵ₀ = 0.0;\ntype = -1;\ndeg = 1;\nband_1 = ParabBand(m,ϵ₀,type,deg);   # create the band\n\nμ = collect(-0.1:0.005:0.2);\nmodel = BandStructure(1,band_1,μ);   # build the band structure\n\nT = collect(51:10:650); # temperature\n\n# impurity scattering\nτ_im = 0.1;\nA_im = .5;\nγ_im = 0.2;\nτ_form = Scattering.impurity(τ_im,A_im,γ=γ_im)\n\nσ_nc = electrical_conductivity(model,T,τ_form); # electrical conductivity\nS_nc = seebeck_coefficient(model,T,τ_form);     # seebeck coefficient\nn_nc = carrier_concentration(model,T,τ_form);   # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Full script","category":"page"},{"location":"examples/#Double-band-model","page":"Examples","title":"Double-band model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n\n# BAND STRUCTURE DEFINITION\nm_1 = [.5, .5, .5, 0.0, 0.0, 0.0];\nϵ₀_1 = .3;\ntype_1 = 1;\ndeg_1 = 1;\nband_1 = ParabBand(m_1,ϵ₀_1,type_1,deg_1)   # create the conduction band\n\nm_2 = [1.0, 1.0, 1.0, 0.0, 0.0, 0.0];\nϵ₀_2 = .0;\ntype_2 = -1;\ndeg_2 = 1;\nband_2 = ParabBand(m_2,ϵ₀_2,type_2,deg_2)   # create the valence band\n\nμ = collect(.2:0.01:.4);\nmodel = BandStructure(2,[band_1,band_2],μ)   # build the two-band structure\n\nT = collect(51:10:650); # temperature\nτ_form = Scattering.acoustic(model,T₀=180,μ_min=5,μ_max=5); # acoustic phonon scattering\n\nσ_nc = electrical_conductivity(model,T,τ_form); # electrical conductivity\nS_nc = seebeck_coefficient(model,T,τ_form);     # seebeck coefficient\nn_nc = carrier_concentration(model,T,τ_form);   # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Full script","category":"page"},{"location":"examples/#Three-band-model","page":"Examples","title":"Three-band model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n\n# BAND STRUCTURE DEFINITION\nm_1 = [.8, .8, .8, 0.0, 0.0, 0.0];\nϵ₀_1 = .45;\ntype_1 = 1;\nband_1 = ParabBand(m_1,ϵ₀_1,type_1,1);   # create the band\n\nm_2 = [1., 1., 1., 0.0, 0.0, 0.0];\nϵ₀_2 = .2;\ntype_2 = -1;\nband_2 = ParabBand(m_2,ϵ₀_2,type_2,1);   # create the band\n\nm_3 = [.5, .5, .5, 0.0, 0.0, 0.0];\nϵ₀_3 = .3;\ntype_3 = -1;\nband_3 = ParabBand(m_3,ϵ₀_3,type_3,1);   # create the band\n\nμ = collect(.2:0.01:.6);\nmodel = BandStructure(3,[band_1,band_2,band_3],μ);   # build the band structure\n\nT = collect(150:50:650); # temperature\nτ_form = Scattering.acoustic(model);     # acoustic phonon scattering\n\nσ_nc = electrical_conductivity(model,T,τ_form); # electrical conductivity\nS_nc = seebeck_coefficient(model,T,τ_form);     # seebeck coefficient\nn_nc = carrier_concentration(model,T,τ_form);   # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Full script","category":"page"},{"location":"examples/#Four-band-model","page":"Examples","title":"Four-band model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n\n# BAND STRUCTURE DEFINITION\nm_1 = [.8, .8, .8, 0.0, 0.0, 0.0];\nϵ₀_1 = .5;\ntype_1 = 1;\nband_1 = ParabBand(m_1,ϵ₀_1,type_1,1);\n\nm_2 = [.5, .5, .5, 0.0, 0.0, 0.0];\nϵ₀_2 = .35;\ntype_2 = 1;\nband_2 = ParabBand(m_2,ϵ₀_2,type_2,1);\n\nm_3 = [1., 1., 1., 0.0, 0.0, 0.0];\nϵ₀_3 = .32;\ntype_3 = -1;\nband_3 = ParabBand(m_3,ϵ₀_3,type_3,1);\n\nm_4 = [.7, .7, .7, 0.0, 0.0, 0.0];\nϵ₀_4 = .25;\ntype_4 = -1;\nband_4 = ParabBand(m_4,ϵ₀_4,type_4,1);\n\nμ = collect(.2:0.01:.6);\nmodel = BandStructure(4,[band_1,band_2,band_3,band_4],μ);   # build the band structure\n\nT = collect(150:50:650);\nτ_form = Scattering.acoustic(model);     # acoustic phonon scattering\n\nσ_nc = electrical_conductivity(model,T,τ_form); # electrical conductivity\nS_nc = seebeck_coefficient(model,T,τ_form);     # seebeck coefficient\nn_nc = carrier_concentration(model,T,τ_form);   # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Full script","category":"page"},{"location":"examples/#Five-band-model","page":"Examples","title":"Five-band model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Mstar2t\nusing Mstar2t: Scattering\n\n\n# BAND STRUCTURE DEFINITION\nm_1 = [.8, .8, .8, 0.0, 0.0, 0.0];\nϵ₀_1 = .5;\ntype_1 = 1;\nband_1 = ParabBand(m_1,ϵ₀_1,type_1,1);\n\nm_2 = [.5, .5, .5, 0.0, 0.0, 0.0];\nϵ₀_2 = .35;\ntype_2 = 1;\nband_2 = ParabBand(m_2,ϵ₀_2,type_2,1);\n\nm_3 = [1., 1., 1., 0.0, 0.0, 0.0];\nϵ₀_3 = .32;\ntype_3 = -1;\nband_3 = ParabBand(m_3,ϵ₀_3,type_3,1);\n\nm_4 = [.5, .5, .5, 0.0, 0.0, 0.0];\nϵ₀_4 = .25;\ntype_4 = -1;\nband_4 = ParabBand(m_4,ϵ₀_4,type_4,1);\n\nm_5 = [.7, .7, .7, 0.0, 0.0, 0.0];\nϵ₀_5 = .22;\ntype_5 = -1;\nband_5 = ParabBand(m_5,ϵ₀_5,type_5,1);\n\nμ = collect(.2:0.01:.6);\nmodel = BandStructure(5,[band_1,band_2,band_3,band_4,band_5],μ);   # build the band structure\n\nT = collect(150:50:650);\nτ_form = Scattering.acoustic(model);     # acoustic phonon scattering\n\nσ_nc = electrical_conductivity(model,T,τ_form); # electrical conductivity\nS_nc = seebeck_coefficient(model,T,τ_form);     # seebeck coefficient\nn_nc = carrier_concentration(model,T,τ_form);   # carrier concentration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Full script","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Julia >= 1.6","category":"page"},{"location":"install/#Dependencies","page":"Installation","title":"Dependencies","text":"","category":"section"},{"location":"install/#Computing-unit-(Julia)","page":"Installation","title":"Computing unit (Julia)","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"ArgParse == 1.1\nCSV == 0.10\nCairoMakie == 0.10\nColors == 0.4\nDataFrames == 1.4\nDistributions == 0.25\nEinsum == 0.4\nFastGaussQuadrature == 0.5\nGLMakie == 0.8\nHTTP == 1.7\nHypergeometricFunctions == 0.3\nJSON == 0.21\nLaTeXStrings == 1.3\nLinearAlgebra == 3.4\nParameters == 0.12\nPlotUtils == 1.3\nPolyLog == 2.3\nPolynomials == 3.2\nQuadGK == 2.6\nSpecialFunctions == 2.1","category":"page"},{"location":"install/#Installation-2","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"Open a Julia REPL, enter the Julia package manager (typing ]) and then add the package with the ssh url of the repository:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"(v1.6) pkg> add https://github.com/marcofornari/Mstar2t.jl.git","category":"page"},{"location":"#Mstar2t-Package","page":"Home","title":"Mstar2t Package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Transport properties from multi-valley density of states in the relaxation time approximation.","category":"page"},{"location":"#Software-Features","page":"Home","title":"Software Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compute electrical conductivity, Seebeck coefficient, carrier concentration, thermal conductivity and Lorentz tensor for multi-valley anisotropic density of states;\nData visualization: transport properties as functions of temperature and chemical potential;\nCommand-line interface and Graphical User Interface;\nMulti-threaded calculations of transport coefficients;\nComparison between experimental and simulated data;\nDatabase creation of transport properties of multi-valley density of states.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some examples of computations using Mstar2t can be found on the Examples page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"install.md\",\n    \"usage.md\",\n    \"docfun.md\",\n    \"examples.md\",\n    ]\nDepth = 1","category":"page"},{"location":"#main-index","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"docfun.md\"]","category":"page"}]
}
